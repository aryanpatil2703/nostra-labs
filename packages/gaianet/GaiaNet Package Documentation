The GaiaNet package contains configuration files and snapshot data required for running our AI models within the Catalyst ecosystem. These files provide the necessary parameters and endpoints for different models, and they are used to initialize and integrate the AI host (Mrs. Beauty) and related functionalities.

---

## Package Contents

- **`gemma.json`**  
  Configuration for the Gemma model.  
- **`llama.json`**  
  Configuration for the Llama model.  
- **`mistral-xs.json`**  
  Configuration for the Mistral XS model.  
- **`mistral.json`**  
  Configuration for the Mistral model.  
- **`my.snapshot.tar.gz`**  
  A compressed snapshot file containing model parameters, weights, and configuration files.

---

## JSON Configuration Files

Each JSON file in this package contains keys that configure an individual AI model node. Common parameters include:

- **`address`**: Deployed contract address (currently empty; to be updated post-deployment).
- **`chat`**: URL to the model’s chat endpoint (hosted on Hugging Face).
- **`chat_ctx_size`**: The context size used during chat interactions.
- **`chat_batch_size`**: Batch size for processing chat inputs.
- **`description`**: A short description of the model.
- **`domain`**: The domain identifier (e.g., `gaia.domains`).
- **`embedding`**: URL for the model's embedding file.
- **`embedding_ctx_size`**: The context size for the embedding.
- **`embedding_batch_size`**: Batch size for embedding processing.
- **`prompt_template`**: The prompt template to be used.
- **`rag_prompt`**: The Retrieval-Augmented Generation (RAG) prompt used for context.
- **`reverse_prompt`**: (If applicable) Reverse prompt settings.
- **`snapshot`**: URL pointing to the snapshot archive (`my.snapshot.tar.gz`), which contains the model's parameters and weights.
- **`system_prompt`**: The system prompt instructing the model's behavior.
- **`rag_policy`**: The policy for RAG (e.g., `system-message` or `last-user-message`).
- **`embedding_collection_name`**: Name of the embedding collection.
- **`qdrant_limit`** and **`qdrant_score_threshold`**: Parameters for Qdrant integration, used for vector similarity search.

Each file tailors these settings to a specific model (Gemma, Llama, Mistral XS, or Mistral).

---

## Snapshot File

- **`my.snapshot.tar.gz`**  
  This compressed archive contains the snapshot data for the AI models, including parameters, weights, and additional configuration files. Each JSON configuration file references this snapshot via its `snapshot` key. Ensure that this file is hosted in an accessible location (as referenced in the JSON files) so that the models can load their necessary data.

---

## Deployed Contract Addresses

For deployed smart contract addresses, please refer to these files:

- **Arbitrum Sepolia:**  
  [Deployed Addresses on Arbitrum Sepolia](https://github.com/lestrom/nostra-labs/blob/main/packages/contracts/ignition/deployments/chain-421614/deployed_addresses.json)

- **Base Sepolia:**  
  [Deployed Addresses on Base Sepolia](https://github.com/lestrom/nostra-labs/blob/main/packages/contracts/ignition/deployments/chain-84532/deployed_addresses.json)

---

## How These Files Are Used

- **Configuration Files:**  
  The JSON files provide the necessary parameters to initialize and run different AI model nodes. They define endpoints for chat and embedding, set context sizes, and configure prompt and system messages.

- **Snapshot File:**  
  The snapshot archive (`my.snapshot.tar.gz`) is used by each model to load pre-trained weights and configuration data. This file is critical for ensuring that the AI models function as expected.

- **Integration in Catalyst:**  
  Within the Catalyst ecosystem, these configurations power the AI host (Mrs. Beauty) and are integrated into our broader research framework. They allow us to experiment with dynamic game mechanics and decentralized decision-making, with data generated by the models feeding into our research initiatives.

---

## Contributing

Contributions to the GaiaNet package are welcome! If you have improvements, additional configurations, or new features to propose, please follow these steps:

1. **Fork the repository.**
2. **Create a new branch:**
   (`git checkout -b feature/your-feature`)
3. **Commit your changes:**
   (`git commit -am "Describe your feature"`)
4. **Push the branch:**
   (`git push origin feature/your-feature`)
5. **Open a Pull Request** describing your changes.

For major changes, please open an issue first to discuss your ideas.

---

**Nostra Labs** – Pioneering decentralized research through innovative, interactive gaming experiences.
